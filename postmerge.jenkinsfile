pipeline {
    agent none
    options {
        buildDiscarder(logRotator(numToKeepStr: '1000'))
    }
    stages {
        stage('Get next version') {
            agent {
                dockerfile {
                    label 'docker'
                    filename 'git.dockerfile'
                }
            }
            steps {
                script {
                    version_g = sh (
                        script: 'sh get-next-version.sh',
                        returnStdout: true
                    ).trim()
                    echo "Next version is ${version_g}"
                    sh "echo -n ${version_g} > version_f"
                }
            }
        }
        stage('Get Docker group') {
            agent { label 'aws-aws-agent' }
            steps {
                script {
                    docker_group = sh (
                        script: "stat -c '%g' /var/run/docker.sock",
                        returnStdout: true
                    ).trim()
                }
            }
        }
        stage('Package, Test, & Deliver') {
            agent {
                dockerfile {
                    label 'aws-aws-agent'
                    filename 'cd-env.dockerfile'
                    args "-v /var/run/docker.sock:/var/run/docker.sock:rw --group-add ${docker_group}"
                }
            }
            steps {
                sh """
                    export version_s=\$(cat version_f)

                    ./package.sh \${version_s}
                    ./integration-test.sh 8 3 5 ${version_g}
                """
            }
        }
        stage('Push to ECR') {
            agent {
                dockerfile {
                    label 'aws-aws-agent'
                    filename 'cd-env.dockerfile'
                    args "-v /var/run/docker.sock:/var/run/docker.sock:rw --group-add ${docker_group}"
                }
            }
            steps {
                sh 'echo "Pushing to ECR"'
                script {
                    def IMAGE = "ci_cd_v1"
                    def ECR_ENDPOINT = "https://071103955219.dkr.ecr.ap-southeast-1.amazonaws.com"
                    def ECS_CREDENTIALS =  "ecr:ap-southeast-1:ecr-deployer-credentials"
                    docker.withRegistry("${ECR_ENDPOINT}", "${ECS_CREDENTIALS}") {
                      def app_web = docker.image("${IMAGE}:${version_g}")
                      app_web.push("${version_g}")
                    }
                }
            }
        }
        stage('Push git tag') {
            agent { label 'docker' }
            steps {
                script {
                    try {
                        container = docker.build("git", "-f git.dockerfile .")
                        container.inside {
                            withCredentials([sshUserPrivateKey(
                                credentialsId: 'github-jaysonpryde-priv', keyFileVariable: 'KEYFILE')]) {
                                withEnv(['GIT_SSH_COMMAND=ssh -o StrictHostKeyChecking=no -i ${KEYFILE}']) {
                                    sh "git tag ${version_g}"
                                    sh "git push origin ${version_g}"
                                }
                            }
                        }
                    } catch (Exception e) {
                        sh "git tag -d ${version_g} || true"
                        throw e
                    }
                }
            }
        }
    }
    post {
        always {
            node('docker') {
                script {
                    currentBuild.description = version_g
                }
                cleanWs()
            }
        }
    }
}

